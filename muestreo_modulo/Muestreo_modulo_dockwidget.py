# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MuestreoDockWidget
                                 A QGIS plugin
 Complemento de rotacipon de muestra
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-05-10
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Lady Viviana Garz√≥n
        email                : viviana.garzon@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, glob

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import QgsProject,QgsVectorLayer,QgsField,QgsFeature, QgsDataProvider, QgsGeometry, QgsMapRendererParallelJob, QgsMapSettings
from qgis.utils import iface
from qgis.core import *
from qgis.utils import *
from qgis.gui import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Muestreo_modulo_dockwidget_base.ui'))


class MuestreoDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(MuestreoDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.qfw_seleccionarMz.setFilter("Archivos dataset(*.shp)")
        self.qfw_seleccionarMuestra.setFilter("Archivos dataset(*.shp)")
        self.btn_adicionar.clicked.connect(self.adicionar_capas)
        self.btn_buscar.clicked.connect(self.buscar)
        self.cmb_seleccion.currentIndexChanged.connect(self.opciones)
        self.btn_Mostrar.clicked.connect(self.mostrarSeg)
        self.btn_imprimir.clicked.connect(self.imprime)
        self.btn_buscAgrup.clicked.connect(self.buscarAgrup)
        self.btn_MostrarAgrup.clicked.connect(self.mostrarAgrup)
        self.btn_confirmar.clicked.connect(self.confirma)
        self.btn_guardar.clicked.connect(self.guarda)

    def adicionar_capas(self,event):
        ruta1=str(self.qfw_seleccionarMuestra.filePath())
        ruta2=str(self.qfw_seleccionarMz.filePath())
        capa1=QgsVectorLayer(ruta1,os.path.basename(ruta1),"ogr")
        capa2=QgsVectorLayer(ruta2,os.path.basename(ruta2),"ogr")
        QgsProject.instance().addMapLayers([capa2])
        QgsProject.instance().addMapLayers([capa1])
        labelSettings=QgsPalLayerSettings()
        labelSettings.fieldName ="""'Seg= '+SEGMENTO"""
        labelSettings.isExpression = True
        capa1.setLabeling(QgsVectorLayerSimpleLabeling(labelSettings))
        capa1.setLabelsEnabled(True)
        
        labelSettings2=QgsPalLayerSettings()
        labelSettings2.fieldName = """'Mz= '+right ("CODIGO",4)+ '\n' +'Agrup= '+right ("AGRUPADO",4)"""
        labelSettings2.isExpression = True
        capa2.setLabeling(QgsVectorLayerSimpleLabeling(labelSettings2))
        capa2.setLabelsEnabled(True)        
        
    def buscar(self):
        ruta1=str(self.qfw_seleccionarMuestra.filePath())
        capa1=QgsVectorLayer(ruta1,os.path.basename(ruta1),"ogr")
        registros=capa1.getFeatures()
        self.qtw_tabla.setRowCount(0)
        codigo=self.ql_codigo.text()
        for registro in registros:
            if registro["SEGMENTO"]==codigo:
                self.qtw_tabla.insertRow(self.qtw_tabla.rowCount())
                self.qtw_tabla.setItem(self.qtw_tabla.rowCount()-1,0,QtWidgets.QTableWidgetItem(str(registro["SEGMENTO"])))
                self.qtw_tabla.setItem(self.qtw_tabla.rowCount()-1,1,QtWidgets.QTableWidgetItem(str(registro["CODIGO"])))
                self.qtw_tabla.setItem(self.qtw_tabla.rowCount()-1,2,QtWidgets.QTableWidgetItem(str(registro["AGRUPADO"])))
                
    def opciones(self):
        ruta1=str(self.qfw_seleccionarMuestra.filePath())
        ruta2=str(self.qfw_seleccionarMz.filePath())
        capa1=QgsVectorLayer(ruta1,os.path.basename(ruta1),"ogr")
        capa2=QgsVectorLayer(ruta2,os.path.basename(ruta2),"ogr")
        self.cmb_seleccion.clearEditText()
        value = self.cmb_seleccion.currentText()
        conf = QgsMapSettings()
        conf.setLayers([capa1,capa2])
        conf.setBackgroundColor(QColor(255, 255, 255))
        conf.setOutputSize(QSize(800, 600))
        conf.setExtent(capa1.extent())
        render=QgsMapRendererParallelJob(conf)
        image_location=os.path.join(os.getcwd(),"hel.png")    

        if value == "Si":
            self.label_agrup.setEnabled(True)
            self.lineAgrup.setEnabled(True)
            self.qfw_guardarPre.setEnabled(False)
            self.btn_imprimir.setEnabled(False)
            self.btn_buscAgrup.setEnabled(True)
        else:
            self.label_agrup.setEnabled(False)
            self.lineAgrup.setEnabled(False)
            self.qfw_guardarPre.setEnabled(True)
            self.label_impres.setEnabled(True)
            self.btn_imprimir.setEnabled(True)
            self.btn_buscAgrup.setEnabled(False)
            self.lineAgrup.clear()
                        
    def imprime(self):  
            projectInstance = QgsProject.instance()
            layoutmanager = projectInstance.layoutManager()
            layout = layoutmanager.layoutByName("muestreo")
            exporter = QgsLayoutExporter(layout)
            folder_path = self.qfw_guardarPre.filePath()  # Get folder path from QgsFileWidget
            exporter.exportToPdf(folder_path + '\segmento_inicial.pdf', QgsLayoutExporter.PdfExportSettings())
              
    def mostrarSeg(self):
        ruta1=str(self.qfw_seleccionarMuestra.filePath())
        capa1=QgsVectorLayer(ruta1,os.path.basename(ruta1),"ogr")
        seg=self.qtw_tabla.item(0,0).text()
        expresion="SEGMENTO="+seg
        capa1.selectByExpression(expresion,QgsVectorLayer.SetSelection)
        features=capa1.getFeatures(expresion)
        iface.mapCanvas().zoomToSelected(capa1)
                        
    def buscarAgrup(self):
        ruta2=str(self.qfw_seleccionarMz.filePath())
        capa2=QgsVectorLayer(ruta2,os.path.basename(ruta2),"ogr")
        registros=capa2.getFeatures()
        self.qtw_tabla2.setRowCount(0)
        codigo=self.lineAgrup.text()
        for registro in registros:
            if registro["AGRUPADO"]==codigo:
                self.qtw_tabla2.insertRow(self.qtw_tabla2.rowCount())
                self.qtw_tabla2.setItem(self.qtw_tabla2.rowCount()-1,0,QtWidgets.QTableWidgetItem(str(registro["AGRUPADO"])))
                self.qtw_tabla2.setItem(self.qtw_tabla2.rowCount()-1,1,QtWidgets.QTableWidgetItem(str(registro["CODIGO"])))
                
    def mostrarAgrup(self):
        ruta2=str(self.qfw_seleccionarMz.filePath())
        capa2=QgsVectorLayer(ruta2,os.path.basename(ruta2),"ogr")
        agrup=self.qtw_tabla2.item(0,0).text()
        expresion="AGRUPADO= '"+agrup+"'"
        capa2.selectByExpression(expresion,QgsVectorLayer.SetSelection)
        features=capa2.getFeatures(expresion)
        iface.mapCanvas().zoomToSelected(capa2) 
        
    def confirma(self):
        ruta1=str(self.qfw_seleccionarMuestra.filePath())
        ruta2=str(self.qfw_seleccionarMz.filePath())
        CapaMuestra=QgsVectorLayer(ruta1,os.path.basename(ruta1),"ogr")
        CapaMz=QgsVectorLayer(ruta2,os.path.basename(ruta2),"ogr")
        agrup=self.qtw_tabla2.item(0,0).text()
        expresion2="AGRUPADO='"+agrup+"'"
        CapaMz.selectByExpression(expresion2,QgsVectorLayer.SetSelection) 
        iface.copySelectionToClipboard(CapaMz) 
        CapaMuestra.startEditing()
        iface.pasteFromClipboard(CapaMuestra) 
        segm=self.ql_codigo.text()
        expresion3="SEGMENTO='"+segm+"'"
        CapaMuestra.selectByExpression(expresion3,QgsVectorLayer.SetSelection)
        CapaMuestra.deleteSelectedFeatures()
        CapaMuestra.commitChanges()
        iface.vectorLayerTools().stopEditing(CapaMuestra)
        iface.mapCanvas().refreshAllLayers()
            
        CapaMuestra.startEditing()
        expresion4="AGRUPADO='"+agrup+"'"
        CapaMuestra.selectByExpression(expresion4,QgsVectorLayer.SetSelection)
        for feature in CapaMuestra.selectedFeatures():
            feature.setAttribute("SEGMENTO", segm)
            CapaMuestra.updateFeature(feature)
        CapaMuestra.commitChanges()
        iface.vectorLayerTools().stopEditing(CapaMuestra)
        iface.mapCanvas().refreshAllLayers()
        
    def guarda(self):
        projectInstance = QgsProject.instance()
        layoutmanager = projectInstance.layoutManager()
        layout = layoutmanager.layoutByName("muestreo")
        exporter = QgsLayoutExporter(layout)
        folder_path = self.qfw_guardar.filePath()  # Get folder path from QgsFileWidget
        exporter.exportToPdf(folder_path + '\segmento_rotado.pdf', QgsLayoutExporter.PdfExportSettings())
                        
    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

